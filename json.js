const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const xlsx = require('xlsx');
const axios = require('axios');

// –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const token = '7251480208:AAHUy1k1qW__Gi6WlrixsHebwrDWFcYauoQ';
const requiredChannel = '@naneironkah'; 
const channelUrl = `https://t.me/${requiredChannel.replace('@', '')}`; // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const xlsx = require('xlsx');
const axios = require('axios');

// –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const token = '7251480208:AAHUy1k1qW__Gi6WlrixsHebwrDWFcYauoQ';
const requiredChannel = '@naneironkah'; 
const channelUrl = `https://t.me/${requiredChannel.replace('@', '')}`; // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async function isUserSubscribed(userId) {
  try {
    const response = await axios.get(`https://api.telegram.org/bot${token}/getChatMember`, {
      params: {
        chat_id: requiredChannel,
        user_id: userId,
      },
    });

    const status = response.data.result.status;
    return ['member', 'administrator', 'creator'].includes(status);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error.response?.data || error.message);
    return false;
  }
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON
function extractText(message) {
  if (!message.text) return '';
  if (Array.isArray(message.text)) {
    return message.text.map((item) => (typeof item === 'string' ? item : item.text || '')).join('');
  }
  return message.text;
}

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –≤ XLSX
function adjustColumnWidths(worksheet) {
    const cols = Object.keys(worksheet).filter((key) => key[0] !== '!');
    const maxWidths = {};
  
    cols.forEach((cell) => {
      const col = cell.match(/[A-Z]+/)[0];
      const value = worksheet[cell]?.v?.toString() || '';
      maxWidths[col] = Math.max(maxWidths[col] || 0, value.length);
    });
  
    worksheet['!cols'] = Object.keys(maxWidths).map((col, index) => {
      // –£–º–µ–Ω—å—à–∏—Ç—å —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ "date" –∏ "from", —É–≤–µ–ª–∏—á–∏—Ç—å –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
      if (index === 0 || index === 1) {
        return { wch: Math.max(1, maxWidths[col] / 1) }; // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤ 9 —Ä–∞–∑
      }
      return { wch: Math.max(1, maxWidths[col] / 10) }; // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 10 —Ä–∞–∑
    });
  }

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
  bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! üëã
–Ø –ø–æ–º–æ–≥—É –æ—á–∏—Å—Ç–∏—Ç—å JSON –æ—Ç –Ω–µ –Ω—É–∂–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ üìÇ‚ú®
–í–∞–∂–Ω–æ: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ñ–∞–π–ª–∞–º–∏ JSON!

–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—ã —Å–º–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å –≤ .txt –∏–ª–∏ .xlsx

–ß—Ç–æ–±—ã —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${requiredChannel}. –ë–æ—Ç –≤—Å–µ–≥–¥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è.

–ü–æ–¥–ø–∏—Å–∞–ª—Å—è? –¢–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–π —Ñ–∞–π–ª! üöÄ .`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: channelUrl }]
      ],
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;

  if (data === 'check_subscription') {
    const subscribed = await isUserSubscribed(userId);

    if (subscribed) {
      bot.sendMessage(chatId, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å JSON —Ñ–∞–π–ª.');
    } else {
      bot.sendMessage(chatId, `–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª ${requiredChannel}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: channelUrl }],
            [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'check_subscription' }],
          ],
        },
      });
    }

    bot.answerCallbackQuery(callbackQuery.id); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–µ–º–∞ —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('document', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
  if (!(await isUserSubscribed(userId))) {
    bot.sendMessage(chatId, `–û–π-–æ–π! üòÖ
–ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –∞ —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: channelUrl }],
          [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'check_subscription' }],
        ],
      },
    });
    return;
  }

  const fileId = msg.document.file_id;

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
  bot.getFile(fileId).then((file) => {
    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    bot.downloadFile(file.file_id, './').then((filePath) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ JSON —Ñ–∞–π–ª
      if (path.extname(filePath) !== '.json') {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª.');
        return;
      }

      // –ß—Ç–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
      fs.readFile(filePath, 'utf-8', (err, data) => {
        if (err) {
          bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.');
          return console.error(err);
        }

        try {
          const jsonData = JSON.parse(data);

          if (jsonData && jsonData.messages && jsonData.messages.length > 0) {
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const extractedMessages = jsonData.messages.map((message) => ({
              –î–∞—Ç–∞: message.date || '',
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: message.from || '',
              –¢–µ–∫—Å—Ç: extractText(message),
            }));

            const xlsxFileName = `—Å–æ–æ–±—â–µ–Ω–∏—è_${Date.now()}.xlsx`;
            const txtFileName = `—Å–æ–æ–±—â–µ–Ω–∏—è_${Date.now()}.txt`;

            // –°–æ–∑–¥–∞–Ω–∏–µ XLSX —Ñ–∞–π–ª–∞
            const workbook = xlsx.utils.book_new();
            const worksheet = xlsx.utils.json_to_sheet(extractedMessages);
            adjustColumnWidths(worksheet); // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            xlsx.utils.book_append_sheet(workbook, worksheet, '–°–æ–æ–±—â–µ–Ω–∏—è');
            xlsx.writeFile(workbook, xlsxFileName);

            // –°–æ–∑–¥–∞–Ω–∏–µ TXT —Ñ–∞–π–ª–∞
            const txtContent = extractedMessages
              .map((msg) => `–î–∞—Ç–∞: ${msg.–î–∞—Ç–∞}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${msg.–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å}\n–¢–µ–∫—Å—Ç: ${msg.–¢–µ–∫—Å—Ç}\n\n`)
              .join('');
            fs.writeFileSync(txtFileName, txtContent);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
            const buttons = {
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '–°–∫–∞—á–∞—Ç—å TXT', callback_data: `txt_${txtFileName}` },
                    { text: '–°–∫–∞—á–∞—Ç—å XLSX', callback_data: `xlsx_${xlsxFileName}` },
                  ],
                ],
              },
            };

            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', buttons);
          } else {
            bot.sendMessage(chatId, '–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.');
          }
        } catch (parseError) {
          bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON.');
          console.error(parseError);
        }
      });
    });
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
bot.on('callback_query', (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const data = callbackQuery.data;

  if (data.startsWith('txt_')) {
    const fileName = data.slice(4);
    bot.sendDocument(chatId, fileName).then(() => {
      fs.unlink(fileName, (err) => {
        if (err) console.error(err);
      });
    });
  } else if (data.startsWith('xlsx_')) {
    const fileName = data.slice(5);
    bot.sendDocument(chatId, fileName).then(() => {
      fs.unlink(fileName, (err) => {
        if (err) console.error(err);
      });
    });
  }

  bot.answerCallbackQuery(callbackQuery.id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error(error);
});
// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async function isUserSubscribed(userId) {
  try {
    const response = await axios.get(`https://api.telegram.org/bot${token}/getChatMember`, {
      params: {
        chat_id: requiredChannel,
        user_id: userId,
      },
    });

    const status = response.data.result.status;
    return ['member', 'administrator', 'creator'].includes(status);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error.response?.data || error.message);
    return false;
  }
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON
function extractText(message) {
  if (!message.text) return '';
  if (Array.isArray(message.text)) {
    return message.text.map((item) => (typeof item === 'string' ? item : item.text || '')).join('');
  }
  return message.text;
}

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –≤ XLSX
function adjustColumnWidths(worksheet) {
    const cols = Object.keys(worksheet).filter((key) => key[0] !== '!');
    const maxWidths = {};
  
    cols.forEach((cell) => {
      const col = cell.match(/[A-Z]+/)[0];
      const value = worksheet[cell]?.v?.toString() || '';
      maxWidths[col] = Math.max(maxWidths[col] || 0, value.length);
    });
  
    worksheet['!cols'] = Object.keys(maxWidths).map((col, index) => {
      // –£–º–µ–Ω—å—à–∏—Ç—å —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ "date" –∏ "from", —É–≤–µ–ª–∏—á–∏—Ç—å –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
      if (index === 0 || index === 1) {
        return { wch: Math.max(1, maxWidths[col] / 1) }; // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤ 9 —Ä–∞–∑
      }
      return { wch: Math.max(1, maxWidths[col] / 10) }; // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 10 —Ä–∞–∑
    });
  }

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
  bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! üëã
–Ø –ø–æ–º–æ–≥—É –æ—á–∏—Å—Ç–∏—Ç—å JSON –æ—Ç –Ω–µ –Ω—É–∂–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ üìÇ‚ú®
–í–∞–∂–Ω–æ: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ñ–∞–π–ª–∞–º–∏ JSON!

–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—ã —Å–º–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å –≤ .txt –∏–ª–∏ .xlsx

–ß—Ç–æ–±—ã —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${requiredChannel}. –ë–æ—Ç –≤—Å–µ–≥–¥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è.

–ü–æ–¥–ø–∏—Å–∞–ª—Å—è? –¢–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–π —Ñ–∞–π–ª! üöÄ .`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: channelUrl }]
      ],
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;

  if (data === 'check_subscription') {
    const subscribed = await isUserSubscribed(userId);

    if (subscribed) {
      bot.sendMessage(chatId, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å JSON —Ñ–∞–π–ª.');
    } else {
      bot.sendMessage(chatId, `–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª ${requiredChannel}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: channelUrl }],
            [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'check_subscription' }],
          ],
        },
      });
    }

    bot.answerCallbackQuery(callbackQuery.id); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–µ–º–∞ —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('document', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
  if (!(await isUserSubscribed(userId))) {
    bot.sendMessage(chatId, `–û–π-–æ–π! üòÖ
–ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –∞ —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: channelUrl }],
          [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'check_subscription' }],
        ],
      },
    });
    return;
  }

  const fileId = msg.document.file_id;

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
  bot.getFile(fileId).then((file) => {
    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    bot.downloadFile(file.file_id, './').then((filePath) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ JSON —Ñ–∞–π–ª
      if (path.extname(filePath) !== '.json') {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª.');
        return;
      }

      // –ß—Ç–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
      fs.readFile(filePath, 'utf-8', (err, data) => {
        if (err) {
          bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.');
          return console.error(err);
        }

        try {
          const jsonData = JSON.parse(data);

          if (jsonData && jsonData.messages && jsonData.messages.length > 0) {
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const extractedMessages = jsonData.messages.map((message) => ({
              –î–∞—Ç–∞: message.date || '',
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: message.from || '',
              –¢–µ–∫—Å—Ç: extractText(message),
            }));

            const xlsxFileName = `—Å–æ–æ–±—â–µ–Ω–∏—è_${Date.now()}.xlsx`;
            const txtFileName = `—Å–æ–æ–±—â–µ–Ω–∏—è_${Date.now()}.txt`;

            // –°–æ–∑–¥–∞–Ω–∏–µ XLSX —Ñ–∞–π–ª–∞
            const workbook = xlsx.utils.book_new();
            const worksheet = xlsx.utils.json_to_sheet(extractedMessages);
            adjustColumnWidths(worksheet); // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            xlsx.utils.book_append_sheet(workbook, worksheet, '–°–æ–æ–±—â–µ–Ω–∏—è');
            xlsx.writeFile(workbook, xlsxFileName);

            // –°–æ–∑–¥–∞–Ω–∏–µ TXT —Ñ–∞–π–ª–∞
            const txtContent = extractedMessages
              .map((msg) => `–î–∞—Ç–∞: ${msg.–î–∞—Ç–∞}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${msg.–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å}\n–¢–µ–∫—Å—Ç: ${msg.–¢–µ–∫—Å—Ç}\n\n`)
              .join('');
            fs.writeFileSync(txtFileName, txtContent);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
            const buttons = {
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '–°–∫–∞—á–∞—Ç—å TXT', callback_data: `txt_${txtFileName}` },
                    { text: '–°–∫–∞—á–∞—Ç—å XLSX', callback_data: `xlsx_${xlsxFileName}` },
                  ],
                ],
              },
            };

            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', buttons);
          } else {
            bot.sendMessage(chatId, '–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.');
          }
        } catch (parseError) {
          bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON.');
          console.error(parseError);
        }
      });
    });
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
bot.on('callback_query', (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const data = callbackQuery.data;

  if (data.startsWith('txt_')) {
    const fileName = data.slice(4);
    bot.sendDocument(chatId, fileName).then(() => {
      fs.unlink(fileName, (err) => {
        if (err) console.error(err);
      });
    });
  } else if (data.startsWith('xlsx_')) {
    const fileName = data.slice(5);
    bot.sendDocument(chatId, fileName).then(() => {
      fs.unlink(fileName, (err) => {
        if (err) console.error(err);
      });
    });
  }

  bot.answerCallbackQuery(callbackQuery.id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error(error);
});